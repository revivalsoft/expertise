{% extends 'base.html.twig' %}

{% block title %}Estimation de terrain
{% endblock %}

{% block body %}
	<div class="mb-3 text-end no-print">
		<button onclick="window.print()" class="btn btn-outline-secondary">
			üñ®Ô∏è Imprimer
		</button>
	</div>

	<div class="row">
		<div class="col-lg-8">
			<form id="regression-form" method="POST">
				<input type="hidden" name="file" value="{{ file|trim }}">
				<div class="mb-3">
					<label for="surface">Surface √† estimer (m¬≤)</label>
					<input type="number" name="surface" id="surface" class="form-control" value="{{ m2 }}" required>
				</div>
				{% if surface is defined and prix is defined and surface|length > 0 and prix|length > 0 %}
					<div class="table-responsive">
						<table class="table table-bordered text-center">
							<thead class="table-dark">
								<tr>
									<th>Inclure</th>
									<th>Surface (m¬≤)</th>
									<th>Prix (‚Ç¨)</th>
									<th>‚Ç¨/m¬≤</th>
								</tr>
							</thead>
							<tbody>
								{% for i in 0..(surface|length - 1) %}
									<tr>
										<td>
											<input type="checkbox" name="checked[]" value="{{ i }}" class="data-checkbox form-check-input" checked>
										</td>

										<td>{{ surface[i] }}</td>
										<td>{{ prix[i] }}</td>
										<td>
											{% if surface[i] > 0 %}
												{{ (prix[i] / surface[i])|number_format(0, '.', ' ') }}
												‚Ç¨/m¬≤
											{% else %}
												‚Äì
											{% endif %}
										</td>
									</tr>
								{% endfor %}
							</tbody>
						</table>
					</div>
				{% else %}
					<div class="alert alert-warning">Aucune donn√©e disponible.</div>
				{% endif %}
			</form>
		</div>
		<div class="col-lg-4">
			<div id="regression-results" class="sticky-top">
				{% include 'regression/_results.html.twig' %}
			</div>
		</div>
	</div>
{% endblock %}


{% block javascripts %}
	<script>
		document.addEventListener('DOMContentLoaded', () => {
const form = document.getElementById('regression-form');

function submitForm() {
const formData = new FormData(form);
const fileParam = encodeURIComponent(form.querySelector('[name="file"]').value.trim());

fetch('/regression?file=' + fileParam, {
method: 'POST',
body: formData,
headers: {
'X-Requested-With': 'XMLHttpRequest'
}
}).then(response => response.text()).then(html => {
document.getElementById('regression-results').innerHTML = html;

const surfaceEl = document.getElementById('surface-data');
const prixEl = document.getElementById('prix-data');
if (surfaceEl && prixEl) {
const surface = JSON.parse(surfaceEl.textContent);
const prix = JSON.parse(prixEl.textContent);
renderChart(surface, prix);
}
}).catch(error => console.error('Erreur AJAX :', error));
}

document.addEventListener('change', function (e) {
if (e.target.classList.contains('data-checkbox')) {
submitForm();
}
});

document.getElementById('surface').addEventListener('input', submitForm);
});

function renderChart(surface, prix) {
const ctx = document.getElementById('resultChart');
if (! ctx || typeof Chart === 'undefined') {
console.warn("Chart.js non disponible ou canvas manquant.");
return;
}

const dataPoints = surface.map((s, i) => ({x: s, y: prix[i]}));

// üëâ Calcul de la droite de r√©gression (m√©thode des moindres carr√©s)
const n = surface.length;
const sumX = surface.reduce((a, b) => a + b, 0);
const sumY = prix.reduce((a, b) => a + b, 0);
const sumXY = surface.reduce((acc, x, i) => acc + x * prix[i], 0);
const sumX2 = surface.reduce((acc, x) => acc + x * x, 0);

const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
const intercept = (sumY - slope * sumX) / n;

const minX = Math.min(... surface);
const maxX = Math.max(... surface);
const regressionLine = [
{
x: minX,
y: slope * minX + intercept
}, {
x: maxX,
y: slope * maxX + intercept
}
];

// üîÅ D√©truire l'ancien graphique s'il existe
if (window.resultChartInstance) {
window.resultChartInstance.destroy();
}

window.resultChartInstance = new Chart(ctx.getContext('2d'), {
type: 'scatter',
data: {
datasets: [
{
label: 'Donn√©es s√©lectionn√©es',
data: dataPoints,
backgroundColor: 'rgba(13,110,253,0.7)'
}, {
label: 'R√©gression lin√©aire',
data: regressionLine,
type: 'line',
borderColor: 'rgba(255,99,132,0.9)',
borderWidth: 2,
fill: false,
pointRadius: 0,
tension: 0
}
]
},
options: {
responsive: true,
maintainAspectRatio: false,
scales: {
x: {
title: {
display: true,
text: 'Surface (m¬≤)'
}
},
y: {
title: {
display: true,
text: 'Prix (‚Ç¨)'
}
}
}
}
});
}
	</script>
{% endblock %}
