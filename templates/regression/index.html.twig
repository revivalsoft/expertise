{% extends 'base.html.twig' %}

{% block title %}Estimation de terrain
{% endblock %}

{% block body %}
	<div class="mb-3 text-end no-print">
		<button onclick="window.print()" class="btn btn-outline-secondary">üñ®Ô∏è Imprimer</button>
	</div>

	<div class="row">
		<div class="col-lg-7 col-md-12">
			<form id="regression-form" method="POST">
				<input type="hidden" name="file" value="{{ file|trim }}">
				<div class="mb-3">
					<label for="surface">Surface √† estimer (m¬≤)</label>
					<input type="number" name="surface" id="surface" class="form-control" value="{{ m2 }}" required>
				</div>

				{% if surface is defined and prix is defined and surface|length > 0 and prix|length > 0 %}
					<div class="table-responsive">
						<table class="table table-bordered text-center">
							<thead class="table-dark">
								<tr>
									<th>Inclure</th>
									<th>Surface (m¬≤)</th>
									<th>Prix (‚Ç¨)</th>
								</tr>
							</thead>
							<tbody>
								{% for i in 0..(surface|length - 1) %}
									<tr>
										<td>
											<input type="checkbox" name="checked[]" value="{{ i }}" class="data-checkbox form-check-input" {% if i in checkedIndexes %} checked {% endif %}>
										</td>
										<td>{{ surface[i] }}</td>
										<td>{{ prix[i] }}</td>
									</tr>
								{% endfor %}
							</tbody>
						</table>
					</div>
				{% else %}
					<div class="alert alert-warning">Aucune donn√©e disponible.</div>
				{% endif %}
			</form>
		</div>

		<div class="col-lg-5 col-md-12">
			<div class="sticky-top" style="top: 80px;">
				<div id="regression-results">
					{% include 'regression/_results.html.twig' %}
				</div>
			</div>
		</div>
	</div>
{% endblock %}

{% block javascripts %}
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		document.addEventListener('DOMContentLoaded', () => {
const form = document.getElementById('regression-form');

function submitForm() {
const formData = new FormData(form);
const fileParam = encodeURIComponent(form.querySelector('[name="file"]').value.trim());

fetch('/regression?file=' + fileParam, {
method: 'POST',
body: formData,
headers: {
'X-Requested-With': 'XMLHttpRequest'
}
}).then(response => response.text()).then(html => {
const resultDiv = document.getElementById('regression-results');
resultDiv.innerHTML = html;

// üîÅ Recharge le graphique apr√®s remplacement du HTML
initChartFromResults();
}).catch(error => console.error('Erreur AJAX :', error));
}

document.querySelectorAll('.data-checkbox').forEach(cb => {
cb.addEventListener('change', submitForm);
});
document.getElementById('surface').addEventListener('input', submitForm);

// Premier chargement du graphique
initChartFromResults();
});

function initChartFromResults() {
const chartCanvas = document.getElementById('resultChart');
if (! chartCanvas) 
return;


const rawData = chartCanvas.dataset.points ? JSON.parse(chartCanvas.dataset.points) : [];
if (! rawData.length) 
return;


const slopeData = [... rawData].sort((a, b) => a.x - b.x);
const slopeStart = slopeData[0];
const slopeEnd = slopeData[slopeData.length - 1];

const slopeY = x => {
const n = rawData.length;
const sumX = rawData.reduce((acc, v) => acc + v.x, 0);
const sumY = rawData.reduce((acc, v) => acc + v.y, 0);
const sumXY = rawData.reduce((acc, v) => acc + v.x * v.y, 0);
const sumX2 = rawData.reduce((acc, v) => acc + v.x * v.x, 0);
const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
const intercept = (sumY - slope * sumX) / n;
return slope * x + intercept;
};

const slopeLine = [
{
x: slopeStart.x,
y: slopeY(slopeStart.x)
}, {
x: slopeEnd.x,
y: slopeY(slopeEnd.x)
},
];

new Chart(chartCanvas.getContext('2d'), {
type: 'scatter',
data: {
datasets: [
{
label: 'Donn√©es s√©lectionn√©es',
data: rawData,
backgroundColor: 'rgba(75, 192, 192, 0.8)',
showLine: false
}, {
label: 'Pente lin√©aire',
data: slopeLine,
type: 'line',
borderColor: 'rgba(255, 99, 132, 1)',
borderWidth: 2,
fill: false,
pointRadius: 0
}
]
},
options: {
responsive: true,
scales: {
x: {
title: {
display: true,
text: 'Surface (m¬≤)'
}
},
y: {
title: {
display: true,
text: 'Prix (‚Ç¨)'
}
}
}
}
});
}
	</script>
{% endblock %}
